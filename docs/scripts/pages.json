[{"name":"data class Chain<T, S>(val terms: List<T>, val separators: List<S>)","description":"cc.ekblad.konbini.Chain","location":"konbini/cc.ekblad.konbini/-chain/index.html","searchKeys":["Chain","data class Chain<T, S>(val terms: List<T>, val separators: List<S>)","cc.ekblad.konbini.Chain"]},{"name":"data class Error(val reason: String, val position: Int, val line: Int, val column: Int) : ParserResult<Any?> ","description":"cc.ekblad.konbini.ParserResult.Error","location":"konbini/cc.ekblad.konbini/-parser-result/-error/index.html","searchKeys":["Error","data class Error(val reason: String, val position: Int, val line: Int, val column: Int) : ParserResult<Any?> ","cc.ekblad.konbini.ParserResult.Error"]},{"name":"data class Ok<T>(val result: T, val remainingInput: String) : ParserResult<T> ","description":"cc.ekblad.konbini.ParserResult.Ok","location":"konbini/cc.ekblad.konbini/-parser-result/-ok/index.html","searchKeys":["Ok","data class Ok<T>(val result: T, val remainingInput: String) : ParserResult<T> ","cc.ekblad.konbini.ParserResult.Ok"]},{"name":"fun <T, S> Chain(terms: List<T>, separators: List<S>)","description":"cc.ekblad.konbini.Chain.Chain","location":"konbini/cc.ekblad.konbini/-chain/-chain.html","searchKeys":["Chain","fun <T, S> Chain(terms: List<T>, separators: List<S>)","cc.ekblad.konbini.Chain.Chain"]},{"name":"fun <T, S> empty(): Chain<T, S>","description":"cc.ekblad.konbini.Chain.Companion.empty","location":"konbini/cc.ekblad.konbini/-chain/-companion/empty.html","searchKeys":["empty","fun <T, S> empty(): Chain<T, S>","cc.ekblad.konbini.Chain.Companion.empty"]},{"name":"fun <T> Ok(result: T, remainingInput: String)","description":"cc.ekblad.konbini.ParserResult.Ok.Ok","location":"konbini/cc.ekblad.konbini/-parser-result/-ok/-ok.html","searchKeys":["Ok","fun <T> Ok(result: T, remainingInput: String)","cc.ekblad.konbini.ParserResult.Ok.Ok"]},{"name":"fun <T> Parser<T>.parse(input: String, skipWhitespace: Boolean = false): ParserResult<T>","description":"cc.ekblad.konbini.parse","location":"konbini/cc.ekblad.konbini/parse.html","searchKeys":["parse","fun <T> Parser<T>.parse(input: String, skipWhitespace: Boolean = false): ParserResult<T>","cc.ekblad.konbini.parse"]},{"name":"fun <T> Parser<T>.parseToEnd(input: String, ignoreWhitespace: Boolean = false): ParserResult<T>","description":"cc.ekblad.konbini.parseToEnd","location":"konbini/cc.ekblad.konbini/parse-to-end.html","searchKeys":["parseToEnd","fun <T> Parser<T>.parseToEnd(input: String, ignoreWhitespace: Boolean = false): ParserResult<T>","cc.ekblad.konbini.parseToEnd"]},{"name":"fun <T> parser(p: ParserState.() -> T): Parser<T>","description":"cc.ekblad.konbini.parser","location":"konbini/cc.ekblad.konbini/parser.html","searchKeys":["parser","fun <T> parser(p: ParserState.() -> T): Parser<T>","cc.ekblad.konbini.parser"]},{"name":"fun Error(reason: String, position: Int, line: Int, column: Int)","description":"cc.ekblad.konbini.ParserResult.Error.Error","location":"konbini/cc.ekblad.konbini/-parser-result/-error/-error.html","searchKeys":["Error","fun Error(reason: String, position: Int, line: Int, column: Int)","cc.ekblad.konbini.ParserResult.Error.Error"]},{"name":"fun ParserState()","description":"cc.ekblad.konbini.ParserState.ParserState","location":"konbini/cc.ekblad.konbini/-parser-state/-parser-state.html","searchKeys":["ParserState","fun ParserState()","cc.ekblad.konbini.ParserState.ParserState"]},{"name":"fun char(): Char","description":"cc.ekblad.konbini.ParserState.char","location":"konbini/cc.ekblad.konbini/-parser-state/char.html","searchKeys":["char","fun char(): Char","cc.ekblad.konbini.ParserState.char"]},{"name":"fun eof()","description":"cc.ekblad.konbini.ParserState.eof","location":"konbini/cc.ekblad.konbini/-parser-state/--eof--.html","searchKeys":["eof","fun eof()","cc.ekblad.konbini.ParserState.eof"]},{"name":"fun fail(msg: String): Nothing","description":"cc.ekblad.konbini.ParserState.fail","location":"konbini/cc.ekblad.konbini/-parser-state/fail.html","searchKeys":["fail","fun fail(msg: String): Nothing","cc.ekblad.konbini.ParserState.fail"]},{"name":"fun propagateLastFailure(newMsg: String? = null): Nothing","description":"cc.ekblad.konbini.ParserState.propagateLastFailure","location":"konbini/cc.ekblad.konbini/-parser-state/propagate-last-failure.html","searchKeys":["propagateLastFailure","fun propagateLastFailure(newMsg: String? = null): Nothing","cc.ekblad.konbini.ParserState.propagateLastFailure"]},{"name":"fun regex(pattern: Regex): String","description":"cc.ekblad.konbini.ParserState.regex","location":"konbini/cc.ekblad.konbini/-parser-state/regex.html","searchKeys":["regex","fun regex(pattern: Regex): String","cc.ekblad.konbini.ParserState.regex"]},{"name":"fun string(expected: String): String","description":"cc.ekblad.konbini.ParserState.string","location":"konbini/cc.ekblad.konbini/-parser-state/string.html","searchKeys":["string","fun string(expected: String): String","cc.ekblad.konbini.ParserState.string"]},{"name":"inline fun <B, T> ParserState.bracket(crossinline before: Parser<B>, crossinline after: Parser<B>, crossinline p: Parser<T>): T","description":"cc.ekblad.konbini.bracket","location":"konbini/cc.ekblad.konbini/bracket.html","searchKeys":["bracket","inline fun <B, T> ParserState.bracket(crossinline before: Parser<B>, crossinline after: Parser<B>, crossinline p: Parser<T>): T","cc.ekblad.konbini.bracket"]},{"name":"inline fun <B, T> bracket(crossinline before: Parser<B>, crossinline after: Parser<B>, crossinline p: Parser<T>): ParserState.() -> T","description":"cc.ekblad.konbini.bracket","location":"konbini/cc.ekblad.konbini/bracket.html","searchKeys":["bracket","inline fun <B, T> bracket(crossinline before: Parser<B>, crossinline after: Parser<B>, crossinline p: Parser<T>): ParserState.() -> T","cc.ekblad.konbini.bracket"]},{"name":"inline fun <T, S> ParserState.chain(crossinline p: Parser<T>, crossinline separator: Parser<S>): Chain<T, S>","description":"cc.ekblad.konbini.chain","location":"konbini/cc.ekblad.konbini/chain.html","searchKeys":["chain","inline fun <T, S> ParserState.chain(crossinline p: Parser<T>, crossinline separator: Parser<S>): Chain<T, S>","cc.ekblad.konbini.chain"]},{"name":"inline fun <T, S> ParserState.chain1(crossinline p: Parser<T>, crossinline separator: Parser<S>): Chain<T, S>","description":"cc.ekblad.konbini.chain1","location":"konbini/cc.ekblad.konbini/chain1.html","searchKeys":["chain1","inline fun <T, S> ParserState.chain1(crossinline p: Parser<T>, crossinline separator: Parser<S>): Chain<T, S>","cc.ekblad.konbini.chain1"]},{"name":"inline fun <T, S> ParserState.chainl(crossinline p: Parser<T>, crossinline separator: Parser<S>, crossinline combine: (T, T, S) -> T): T","description":"cc.ekblad.konbini.chainl","location":"konbini/cc.ekblad.konbini/chainl.html","searchKeys":["chainl","inline fun <T, S> ParserState.chainl(crossinline p: Parser<T>, crossinline separator: Parser<S>, crossinline combine: (T, T, S) -> T): T","cc.ekblad.konbini.chainl"]},{"name":"inline fun <T, S> ParserState.chainr(crossinline p: Parser<T>, crossinline separator: Parser<S>, crossinline combine: (T, T, S) -> T): T","description":"cc.ekblad.konbini.chainr","location":"konbini/cc.ekblad.konbini/chainr.html","searchKeys":["chainr","inline fun <T, S> ParserState.chainr(crossinline p: Parser<T>, crossinline separator: Parser<S>, crossinline combine: (T, T, S) -> T): T","cc.ekblad.konbini.chainr"]},{"name":"inline fun <T, S> chain(crossinline p: Parser<T>, crossinline separator: Parser<S>): ParserState.() -> Chain<T, S>","description":"cc.ekblad.konbini.chain","location":"konbini/cc.ekblad.konbini/chain.html","searchKeys":["chain","inline fun <T, S> chain(crossinline p: Parser<T>, crossinline separator: Parser<S>): ParserState.() -> Chain<T, S>","cc.ekblad.konbini.chain"]},{"name":"inline fun <T, S> chain1(crossinline p: Parser<T>, crossinline separator: Parser<S>): ParserState.() -> Chain<T, S>","description":"cc.ekblad.konbini.chain1","location":"konbini/cc.ekblad.konbini/chain1.html","searchKeys":["chain1","inline fun <T, S> chain1(crossinline p: Parser<T>, crossinline separator: Parser<S>): ParserState.() -> Chain<T, S>","cc.ekblad.konbini.chain1"]},{"name":"inline fun <T, S> chainl(crossinline p: Parser<T>, crossinline separator: Parser<S>, crossinline combine: (T, T, S) -> T): ParserState.() -> T","description":"cc.ekblad.konbini.chainl","location":"konbini/cc.ekblad.konbini/chainl.html","searchKeys":["chainl","inline fun <T, S> chainl(crossinline p: Parser<T>, crossinline separator: Parser<S>, crossinline combine: (T, T, S) -> T): ParserState.() -> T","cc.ekblad.konbini.chainl"]},{"name":"inline fun <T, S> chainr(crossinline p: Parser<T>, crossinline separator: Parser<S>, crossinline combine: (T, T, S) -> T): ParserState.() -> T","description":"cc.ekblad.konbini.chainr","location":"konbini/cc.ekblad.konbini/chainr.html","searchKeys":["chainr","inline fun <T, S> chainr(crossinline p: Parser<T>, crossinline separator: Parser<S>, crossinline combine: (T, T, S) -> T): ParserState.() -> T","cc.ekblad.konbini.chainr"]},{"name":"inline fun <T, U> Parser<T>.map(crossinline f: (T) -> U): Parser<U>","description":"cc.ekblad.konbini.map","location":"konbini/cc.ekblad.konbini/map.html","searchKeys":["map","inline fun <T, U> Parser<T>.map(crossinline f: (T) -> U): Parser<U>","cc.ekblad.konbini.map"]},{"name":"inline fun <T, U> Parser<T>.then(crossinline p: Parser<U>): Parser<Pair<T, U>>","description":"cc.ekblad.konbini.then","location":"konbini/cc.ekblad.konbini/then.html","searchKeys":["then","inline fun <T, U> Parser<T>.then(crossinline p: Parser<U>): Parser<Pair<T, U>>","cc.ekblad.konbini.then"]},{"name":"inline fun <T> Parser<T>.failsWith(msg: String): Parser<T>","description":"cc.ekblad.konbini.failsWith","location":"konbini/cc.ekblad.konbini/fails-with.html","searchKeys":["failsWith","inline fun <T> Parser<T>.failsWith(msg: String): Parser<T>","cc.ekblad.konbini.failsWith"]},{"name":"inline fun <T> ParserState.atomically(p: Parser<T>): T","description":"cc.ekblad.konbini.atomically","location":"konbini/cc.ekblad.konbini/atomically.html","searchKeys":["atomically","inline fun <T> ParserState.atomically(p: Parser<T>): T","cc.ekblad.konbini.atomically"]},{"name":"inline fun <T> ParserState.many(crossinline p: Parser<T>): List<T>","description":"cc.ekblad.konbini.many","location":"konbini/cc.ekblad.konbini/many.html","searchKeys":["many","inline fun <T> ParserState.many(crossinline p: Parser<T>): List<T>","cc.ekblad.konbini.many"]},{"name":"inline fun <T> ParserState.many1(crossinline p: Parser<T>): List<T>","description":"cc.ekblad.konbini.many1","location":"konbini/cc.ekblad.konbini/many1.html","searchKeys":["many1","inline fun <T> ParserState.many1(crossinline p: Parser<T>): List<T>","cc.ekblad.konbini.many1"]},{"name":"inline fun <T> ParserState.oneOf(vararg ps: Pair<String, Parser<T>>): T","description":"cc.ekblad.konbini.oneOf","location":"konbini/cc.ekblad.konbini/one-of.html","searchKeys":["oneOf","inline fun <T> ParserState.oneOf(vararg ps: Pair<String, Parser<T>>): T","cc.ekblad.konbini.oneOf"]},{"name":"inline fun <T> ParserState.oneOf(vararg ps: Parser<T>): T","description":"cc.ekblad.konbini.oneOf","location":"konbini/cc.ekblad.konbini/one-of.html","searchKeys":["oneOf","inline fun <T> ParserState.oneOf(vararg ps: Parser<T>): T","cc.ekblad.konbini.oneOf"]},{"name":"inline fun <T> ParserState.tryParse(p: Parser<T>): T?","description":"cc.ekblad.konbini.tryParse","location":"konbini/cc.ekblad.konbini/try-parse.html","searchKeys":["tryParse","inline fun <T> ParserState.tryParse(p: Parser<T>): T?","cc.ekblad.konbini.tryParse"]},{"name":"inline fun <T> atomically(crossinline p: Parser<T>): Parser<T>","description":"cc.ekblad.konbini.atomically","location":"konbini/cc.ekblad.konbini/atomically.html","searchKeys":["atomically","inline fun <T> atomically(crossinline p: Parser<T>): Parser<T>","cc.ekblad.konbini.atomically"]},{"name":"inline fun <T> many(crossinline p: Parser<T>): ParserState.() -> List<T>","description":"cc.ekblad.konbini.many","location":"konbini/cc.ekblad.konbini/many.html","searchKeys":["many","inline fun <T> many(crossinline p: Parser<T>): ParserState.() -> List<T>","cc.ekblad.konbini.many"]},{"name":"inline fun <T> many1(noinline p: Parser<T>): ParserState.() -> List<T>","description":"cc.ekblad.konbini.many1","location":"konbini/cc.ekblad.konbini/many1.html","searchKeys":["many1","inline fun <T> many1(noinline p: Parser<T>): ParserState.() -> List<T>","cc.ekblad.konbini.many1"]},{"name":"inline fun <T> oneOf(vararg ps: Pair<String, Parser<T>>): ParserState.() -> T","description":"cc.ekblad.konbini.oneOf","location":"konbini/cc.ekblad.konbini/one-of.html","searchKeys":["oneOf","inline fun <T> oneOf(vararg ps: Pair<String, Parser<T>>): ParserState.() -> T","cc.ekblad.konbini.oneOf"]},{"name":"inline fun <T> oneOf(vararg ps: Parser<T>): ParserState.() -> T","description":"cc.ekblad.konbini.oneOf","location":"konbini/cc.ekblad.konbini/one-of.html","searchKeys":["oneOf","inline fun <T> oneOf(vararg ps: Parser<T>): ParserState.() -> T","cc.ekblad.konbini.oneOf"]},{"name":"inline fun <T> tryParse(crossinline p: Parser<T>): Parser<T?>","description":"cc.ekblad.konbini.tryParse","location":"konbini/cc.ekblad.konbini/try-parse.html","searchKeys":["tryParse","inline fun <T> tryParse(crossinline p: Parser<T>): Parser<T?>","cc.ekblad.konbini.tryParse"]},{"name":"inline fun ParserState.char(vararg expected: Char): Char","description":"cc.ekblad.konbini.char","location":"konbini/cc.ekblad.konbini/char.html","searchKeys":["char","inline fun ParserState.char(vararg expected: Char): Char","cc.ekblad.konbini.char"]},{"name":"inline fun ParserState.regex(pattern: String): String","description":"cc.ekblad.konbini.regex","location":"konbini/cc.ekblad.konbini/regex.html","searchKeys":["regex","inline fun ParserState.regex(pattern: String): String","cc.ekblad.konbini.regex"]},{"name":"inline fun char(vararg expected: Char): ParserState.() -> Char","description":"cc.ekblad.konbini.char","location":"konbini/cc.ekblad.konbini/char.html","searchKeys":["char","inline fun char(vararg expected: Char): ParserState.() -> Char","cc.ekblad.konbini.char"]},{"name":"inline fun fail(reason: String): ParserState.() -> Nothing","description":"cc.ekblad.konbini.fail","location":"konbini/cc.ekblad.konbini/fail.html","searchKeys":["fail","inline fun fail(reason: String): ParserState.() -> Nothing","cc.ekblad.konbini.fail"]},{"name":"inline fun regex(pattern: Regex): Parser<String>","description":"cc.ekblad.konbini.regex","location":"konbini/cc.ekblad.konbini/regex.html","searchKeys":["regex","inline fun regex(pattern: Regex): Parser<String>","cc.ekblad.konbini.regex"]},{"name":"inline fun regex(pattern: String): Parser<String>","description":"cc.ekblad.konbini.regex","location":"konbini/cc.ekblad.konbini/regex.html","searchKeys":["regex","inline fun regex(pattern: String): Parser<String>","cc.ekblad.konbini.regex"]},{"name":"inline fun string(expected: String): ParserState.() -> String","description":"cc.ekblad.konbini.string","location":"konbini/cc.ekblad.konbini/string.html","searchKeys":["string","inline fun string(expected: String): ParserState.() -> String","cc.ekblad.konbini.string"]},{"name":"lateinit var input: String","description":"cc.ekblad.konbini.ParserState.input","location":"konbini/cc.ekblad.konbini/-parser-state/input.html","searchKeys":["input","lateinit var input: String","cc.ekblad.konbini.ParserState.input"]},{"name":"object Companion","description":"cc.ekblad.konbini.Chain.Companion","location":"konbini/cc.ekblad.konbini/-chain/-companion/index.html","searchKeys":["Companion","object Companion","cc.ekblad.konbini.Chain.Companion"]},{"name":"open class ParserState","description":"cc.ekblad.konbini.ParserState","location":"konbini/cc.ekblad.konbini/-parser-state/index.html","searchKeys":["ParserState","open class ParserState","cc.ekblad.konbini.ParserState"]},{"name":"sealed class ParserResult<in T>","description":"cc.ekblad.konbini.ParserResult","location":"konbini/cc.ekblad.konbini/-parser-result/index.html","searchKeys":["ParserResult","sealed class ParserResult<in T>","cc.ekblad.konbini.ParserResult"]},{"name":"val boolean: Parser<Boolean>","description":"cc.ekblad.konbini.boolean","location":"konbini/cc.ekblad.konbini/boolean.html","searchKeys":["boolean","val boolean: Parser<Boolean>","cc.ekblad.konbini.boolean"]},{"name":"val column: Int","description":"cc.ekblad.konbini.ParserResult.Error.column","location":"konbini/cc.ekblad.konbini/-parser-result/-error/column.html","searchKeys":["column","val column: Int","cc.ekblad.konbini.ParserResult.Error.column"]},{"name":"val decimal: Parser<Double>","description":"cc.ekblad.konbini.decimal","location":"konbini/cc.ekblad.konbini/decimal.html","searchKeys":["decimal","val decimal: Parser<Double>","cc.ekblad.konbini.decimal"]},{"name":"val doubleQuotedString: Parser<String>","description":"cc.ekblad.konbini.doubleQuotedString","location":"konbini/cc.ekblad.konbini/double-quoted-string.html","searchKeys":["doubleQuotedString","val doubleQuotedString: Parser<String>","cc.ekblad.konbini.doubleQuotedString"]},{"name":"val integer: Parser<Long>","description":"cc.ekblad.konbini.integer","location":"konbini/cc.ekblad.konbini/integer.html","searchKeys":["integer","val integer: Parser<Long>","cc.ekblad.konbini.integer"]},{"name":"val line: Int","description":"cc.ekblad.konbini.ParserResult.Error.line","location":"konbini/cc.ekblad.konbini/-parser-result/-error/line.html","searchKeys":["line","val line: Int","cc.ekblad.konbini.ParserResult.Error.line"]},{"name":"val next: Char","description":"cc.ekblad.konbini.ParserState.next","location":"konbini/cc.ekblad.konbini/-parser-state/next.html","searchKeys":["next","val next: Char","cc.ekblad.konbini.ParserState.next"]},{"name":"val position: Int","description":"cc.ekblad.konbini.ParserResult.Error.position","location":"konbini/cc.ekblad.konbini/-parser-result/-error/position.html","searchKeys":["position","val position: Int","cc.ekblad.konbini.ParserResult.Error.position"]},{"name":"val reason: String","description":"cc.ekblad.konbini.ParserResult.Error.reason","location":"konbini/cc.ekblad.konbini/-parser-result/-error/reason.html","searchKeys":["reason","val reason: String","cc.ekblad.konbini.ParserResult.Error.reason"]},{"name":"val remainingInput: String","description":"cc.ekblad.konbini.ParserResult.Ok.remainingInput","location":"konbini/cc.ekblad.konbini/-parser-result/-ok/remaining-input.html","searchKeys":["remainingInput","val remainingInput: String","cc.ekblad.konbini.ParserResult.Ok.remainingInput"]},{"name":"val rest: String","description":"cc.ekblad.konbini.ParserState.rest","location":"konbini/cc.ekblad.konbini/-parser-state/rest.html","searchKeys":["rest","val rest: String","cc.ekblad.konbini.ParserState.rest"]},{"name":"val result: T","description":"cc.ekblad.konbini.ParserResult.Ok.result","location":"konbini/cc.ekblad.konbini/-parser-result/-ok/result.html","searchKeys":["result","val result: T","cc.ekblad.konbini.ParserResult.Ok.result"]},{"name":"val separators: List<S>","description":"cc.ekblad.konbini.Chain.separators","location":"konbini/cc.ekblad.konbini/-chain/separators.html","searchKeys":["separators","val separators: List<S>","cc.ekblad.konbini.Chain.separators"]},{"name":"val singleQuotedString: Parser<String>","description":"cc.ekblad.konbini.singleQuotedString","location":"konbini/cc.ekblad.konbini/single-quoted-string.html","searchKeys":["singleQuotedString","val singleQuotedString: Parser<String>","cc.ekblad.konbini.singleQuotedString"]},{"name":"val terms: List<T>","description":"cc.ekblad.konbini.Chain.terms","location":"konbini/cc.ekblad.konbini/-chain/terms.html","searchKeys":["terms","val terms: List<T>","cc.ekblad.konbini.Chain.terms"]},{"name":"val whitespace1: Parser<String>","description":"cc.ekblad.konbini.whitespace1","location":"konbini/cc.ekblad.konbini/whitespace1.html","searchKeys":["whitespace1","val whitespace1: Parser<String>","cc.ekblad.konbini.whitespace1"]},{"name":"val whitespace: Parser<String>","description":"cc.ekblad.konbini.whitespace","location":"konbini/cc.ekblad.konbini/whitespace.html","searchKeys":["whitespace","val whitespace: Parser<String>","cc.ekblad.konbini.whitespace"]},{"name":"var char: Parser<Char>","description":"cc.ekblad.konbini.char","location":"konbini/cc.ekblad.konbini/char.html","searchKeys":["char","var char: Parser<Char>","cc.ekblad.konbini.char"]},{"name":"var position: Int = 0","description":"cc.ekblad.konbini.ParserState.position","location":"konbini/cc.ekblad.konbini/-parser-state/position.html","searchKeys":["position","var position: Int = 0","cc.ekblad.konbini.ParserState.position"]}]
